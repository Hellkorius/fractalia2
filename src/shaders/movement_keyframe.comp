#version 450

layout(local_size_x = 64) in;

// Movement types
#define MOVEMENT_PETAL 0
#define MOVEMENT_ORBIT 1
#define MOVEMENT_WAVE 2
#define MOVEMENT_TRIANGLE_FORMATION 3

// Transition system constants
#define TRANSITION_DURATION 2.0  // Total transition time in seconds
#define TRANSITION_TO_ORIGIN 0.0   // Phase 0: Moving to origin (0,0)
#define TRANSITION_TO_TARGET 1.0   // Phase 1: Moving from origin to target center
#define ORGANIC_TRANSITION_DURATION 1.0  // Organic transition time
#define SPAWN_LERP_DURATION 0.5  // Time to lerp from spawn to pattern position

// Entity states
#define STATE_SPAWN_LERP 0.0
#define STATE_NORMAL 1.0
#define STATE_ANGEL_TRANSITION 2.0
#define STATE_ORGANIC_TRANSITION 3.0

// GPU entity structure - matches CPU-side GPUEntity
struct GPUEntity {
    mat4 modelMatrix;        // Transform matrix
    vec4 color;              // RGBA color
    vec4 movementParams0;    // amplitude, frequency, phase, timeOffset  
    vec4 movementParams1;    // center.xyz, movementType
    vec4 runtimeState;       // totalTime, initialized, stateTimer, entityState
};

// Entity buffer (read-only for keyframe generation)
layout(set = 0, binding = 0, std430) restrict readonly buffer EntityBuffer {
    GPUEntity entities[];
};

// Keyframe buffer (20 frames × N entities × keyframe data)
// Each keyframe: vec3 position + float rotation + vec4 color = 8 floats
layout(set = 0, binding = 1, std430) restrict writeonly buffer KeyframeBuffer {
    float keyframes[]; // Raw float array to store position + rotation + color
};

// Push constants for frame data
layout(push_constant) uniform PushConstants {
    uint entityBatch;       // Which entity batch to update (0-19)
    float deltaTime;        // Time per frame
    uint entityCount;       // Total number of entities
    float futureTime;       // Future prediction time
} pc;

// Movement pattern implementations (same as regular movement shader)
vec3 computePetalMovement(vec3 center, float amplitude, float frequency, float phase, float totalTime) {
    float radialOscillation = 0.5 + 0.5 * sin(totalTime * frequency * 0.3);
    float currentRadius = amplitude * radialOscillation;
    float petalAngle = totalTime * frequency + phase;
    
    return center + vec3(
        currentRadius * cos(petalAngle),
        currentRadius * sin(petalAngle),
        0.0
    );
}

vec3 computeOrbitMovement(vec3 center, float amplitude, float frequency, float phase, float totalTime) {
    float angle = totalTime * frequency + phase;
    return center + vec3(
        amplitude * cos(angle),
        amplitude * sin(angle),
        0.0
    );
}

vec3 computeWaveMovement(vec3 center, float amplitude, float frequency, float phase, float totalTime) {
    float wave = sin(totalTime * frequency + phase);
    return center + vec3(
        amplitude * wave,
        amplitude * cos(totalTime * frequency * 0.5 + phase),
        0.0
    );
}

vec3 computeTriangleFormation(vec3 center, float amplitude, float frequency, float phase, float totalTime) {
    float orbitRadius = amplitude * 2.0;
    float orbitAngle = totalTime * frequency + phase;
    vec3 orbitPosition = vec3(
        orbitRadius * cos(orbitAngle),
        orbitRadius * sin(orbitAngle),
        0.0
    );
    
    float trianglePhase = orbitAngle * 1.5;
    float triangleWarp = sin(trianglePhase) * 0.4;
    float warpedRadius = orbitRadius * (1.0 + triangleWarp);
    vec3 triangularOrbit = vec3(
        warpedRadius * cos(orbitAngle),
        warpedRadius * sin(orbitAngle),
        0.0
    );
    
    float cosmicTime = totalTime * frequency + phase;
    float foldingPhase = sin(cosmicTime * 0.7 + phase * 2.0);
    float dimensionalFold = pow(abs(foldingPhase), 3.0) * sign(foldingPhase);
    
    float radialOscillation = 0.5 + 0.5 * sin(totalTime * frequency * 0.3 + phase * 2.0);
    float interweavingScale = 0.8 + 0.4 * radialOscillation;
    
    float distanceFromCenter = length(triangularOrbit);
    float curvature = sin(orbitAngle * 3.0 + totalTime * frequency * 0.3) * orbitRadius * 0.1;
    vec3 curvatureVector = vec3(-sin(orbitAngle), cos(orbitAngle), 0.0) * curvature;
    
    vec3 finalPosition = triangularOrbit * interweavingScale + curvatureVector;
    finalPosition += vec3(dimensionalFold * 0.1, dimensionalFold * 0.15, 0.0);
    
    return center + finalPosition;
}

// Smooth transition system - entities move to origin, then to new center (Angel Mode)
vec3 computeTransitionMovement(vec3 currentPos, vec3 targetCenter, float transitionTime, float transitionPhase) {
    float halfDuration = TRANSITION_DURATION * 0.5;
    
    if (transitionPhase < 0.5) {
        // Phase 0: Move from current position to origin (0,0)
        float t = clamp(transitionTime / halfDuration, 0.0, 1.0);
        // Smooth easing function (ease-in-out)
        t = t * t * (3.0 - 2.0 * t);
        return mix(currentPos, vec3(0.0, 0.0, 0.0), t);
    } else {
        // Phase 1: Move from origin to target center
        float t = clamp((transitionTime - halfDuration) / halfDuration, 0.0, 1.0);
        // Smooth easing function (ease-in-out)
        t = t * t * (3.0 - 2.0 * t);
        return mix(vec3(0.0, 0.0, 0.0), targetCenter, t);
    }
}

// Organic transition system - entities move directly to their target position in the new pattern
vec3 computeOrganicTransition(vec3 currentPos, vec3 targetPos, float transitionTime) {
    float t = clamp(transitionTime / ORGANIC_TRANSITION_DURATION, 0.0, 1.0);
    // Smooth easing function (ease-in-out)
    t = t * t * (3.0 - 2.0 * t);
    return mix(currentPos, targetPos, t);
}

void main() {
    uint entityID = gl_GlobalInvocationID.x;
    
    // Bounds check
    if (entityID >= pc.entityCount) {
        return;
    }
    
    // Staggered update: only process entities in current batch
    if ((entityID % 20) != pc.entityBatch) {
        return;
    }
    
    // Read entity data
    GPUEntity entity = entities[entityID];
    
    // Extract movement parameters
    float amplitude = entity.movementParams0.x;
    float frequency = entity.movementParams0.y;
    float phase = entity.movementParams0.z;
    float timeOffset = entity.movementParams0.w;
    vec3 center = entity.movementParams1.xyz;
    uint movementType = uint(entity.movementParams1.w);
    
    // Extract runtime state
    float totalTime = entity.runtimeState.x;
    bool initialized = entity.runtimeState.y > 0.5;
    float stateTimer = entity.runtimeState.z;
    float entityState = entity.runtimeState.w;
    
    // Get current position from model matrix
    vec3 currentPos = vec3(entity.modelMatrix[3][0], entity.modelMatrix[3][1], entity.modelMatrix[3][2]);
    
    // Predict future time
    float keyframeTime = pc.futureTime + timeOffset;
    float adjustedTime = keyframeTime;
    
    // Predict future state timer
    float futureStateTimer = stateTimer + pc.deltaTime * 20.0; // Approximate 20 frames ahead
    
    vec3 keyframePosition;
    
    // State machine for keyframe prediction
    if (!initialized || entityState == STATE_SPAWN_LERP) {
        // Spawn lerp state: predict lerp to pattern position
        
        // Calculate where entity should be in movement pattern at future time
        vec3 targetPatternPosition;
        switch (movementType) {
            case MOVEMENT_PETAL:
                targetPatternPosition = computePetalMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
            case MOVEMENT_ORBIT:
                targetPatternPosition = computeOrbitMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
            case MOVEMENT_WAVE:
                targetPatternPosition = computeWaveMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
            case MOVEMENT_TRIANGLE_FORMATION:
                targetPatternPosition = computeTriangleFormation(center, amplitude, frequency, phase, adjustedTime);
                break;
            default:
                targetPatternPosition = computePetalMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
        }
        
        // Predict lerp progress at future time
        float t = clamp(futureStateTimer / SPAWN_LERP_DURATION, 0.0, 1.0);
        t = t * t * (3.0 - 2.0 * t); // Smooth step easing
        
        if (futureStateTimer >= SPAWN_LERP_DURATION) {
            // Will be in normal state by keyframe time
            keyframePosition = targetPatternPosition;
        } else {
            // Still lerping at keyframe time
            keyframePosition = mix(center, targetPatternPosition, t);
        }
    }
    else if (entityState == STATE_ANGEL_TRANSITION) {
        // Angel transition state: predict transition movement
        float transitionPhase = (futureStateTimer >= TRANSITION_DURATION * 0.5) ? 1.0 : 0.0;
        
        if (futureStateTimer >= TRANSITION_DURATION) {
            // Will be in normal state by keyframe time - compute normal movement
            vec3 transitionCenter = vec3(0.0, 0.0, 0.0); // After angel transition, center is origin
            switch (movementType) {
                case MOVEMENT_PETAL:
                    keyframePosition = computePetalMovement(transitionCenter, amplitude, frequency, phase, adjustedTime);
                    break;
                case MOVEMENT_ORBIT:
                    keyframePosition = computeOrbitMovement(transitionCenter, amplitude, frequency, phase, adjustedTime);
                    break;
                case MOVEMENT_WAVE:
                    keyframePosition = computeWaveMovement(transitionCenter, amplitude, frequency, phase, adjustedTime);
                    break;
                case MOVEMENT_TRIANGLE_FORMATION:
                    keyframePosition = computeTriangleFormation(transitionCenter, amplitude, frequency, phase, adjustedTime);
                    break;
                default:
                    keyframePosition = computePetalMovement(transitionCenter, amplitude, frequency, phase, adjustedTime);
                    break;
            }
        } else {
            // Still transitioning at keyframe time
            keyframePosition = computeTransitionMovement(currentPos, center, futureStateTimer, transitionPhase);
        }
    }
    else if (entityState == STATE_ORGANIC_TRANSITION) {
        // Organic transition state: predict organic movement
        
        // Calculate where entity should be in movement pattern at future time
        vec3 targetPosition;
        switch (movementType) {
            case MOVEMENT_PETAL:
                targetPosition = computePetalMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
            case MOVEMENT_ORBIT:
                targetPosition = computeOrbitMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
            case MOVEMENT_WAVE:
                targetPosition = computeWaveMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
            case MOVEMENT_TRIANGLE_FORMATION:
                targetPosition = computeTriangleFormation(center, amplitude, frequency, phase, adjustedTime);
                break;
            default:
                targetPosition = computePetalMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
        }
        
        if (futureStateTimer >= ORGANIC_TRANSITION_DURATION) {
            // Will be in normal state by keyframe time
            keyframePosition = targetPosition;
        } else {
            // Still transitioning at keyframe time
            keyframePosition = computeOrganicTransition(currentPos, targetPosition, futureStateTimer);
        }
    }
    else { // STATE_NORMAL or default
        // Normal movement pattern computation
        switch (movementType) {
            case MOVEMENT_PETAL:
                keyframePosition = computePetalMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
            case MOVEMENT_ORBIT:
                keyframePosition = computeOrbitMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
            case MOVEMENT_WAVE:
                keyframePosition = computeWaveMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
            case MOVEMENT_TRIANGLE_FORMATION:
                keyframePosition = computeTriangleFormation(center, amplitude, frequency, phase, adjustedTime);
                break;
            default:
                keyframePosition = computePetalMovement(center, amplitude, frequency, phase, adjustedTime);
                break;
        }
    }
    
    // Calculate rotation based on amplitude (same as original movement shader)
    float rotationSpeed = amplitude * 0.1;
    float rotation = keyframeTime * rotationSpeed;
    
    // Generate dynamic color (same as original movement shader)
    float hue = mod(phase + keyframeTime * 0.5, 6.28318530718) / 6.28318530718;
    float saturation = 0.7 + 0.3 * sin(frequency * keyframeTime);
    float brightness = 0.8 + 0.2 * sin(amplitude * keyframeTime * 0.5);
    
    // Convert HSV to RGB
    float c = brightness * saturation;
    float x = c * (1.0 - abs(mod(hue * 6.0, 2.0) - 1.0));
    float m = brightness - c;
    
    vec3 rgb;
    if (hue < 1.0/6.0) rgb = vec3(c, x, 0);
    else if (hue < 2.0/6.0) rgb = vec3(x, c, 0);
    else if (hue < 3.0/6.0) rgb = vec3(0, c, x);
    else if (hue < 4.0/6.0) rgb = vec3(0, x, c);
    else if (hue < 5.0/6.0) rgb = vec3(x, 0, c);
    else rgb = vec3(c, 0, x);
    
    vec4 dynamicColor = vec4(rgb + m, 1.0);
    
    // Store prediction directly for this entity (no slots, just entity-based indexing)
    uint baseIndex = entityID * 8;
    
    // Write keyframe data: position(3) + rotation(1) + color(4)
    keyframes[baseIndex + 0] = keyframePosition.x;
    keyframes[baseIndex + 1] = keyframePosition.y;
    keyframes[baseIndex + 2] = keyframePosition.z;
    keyframes[baseIndex + 3] = rotation;
    keyframes[baseIndex + 4] = dynamicColor.r;
    keyframes[baseIndex + 5] = dynamicColor.g;
    keyframes[baseIndex + 6] = dynamicColor.b;
    keyframes[baseIndex + 7] = dynamicColor.a;
}